/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.14
 * Generated at: 2022-02-15 00:15:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import board.*;
import java.util.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("board");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>JSP Board</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      board.BoardMgr bMgr = null;
      bMgr = (board.BoardMgr) _jspx_page_context.getAttribute("bMgr", jakarta.servlet.jsp.PageContext.PAGE_SCOPE);
      if (bMgr == null){
        bMgr = new board.BoardMgr();
        _jspx_page_context.setAttribute("bMgr", bMgr, jakarta.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	\r\n");
	
	request.setCharacterEncoding("UTF-8");
	  
    int totalRecord=0; 			// 전체레코드수
	int numPerPage=10; 		// 페이지당 레코드 수(화면에 표시될 개수 )
	int pagePerBlock=15; 		// 블럭당 페이지수 
	  
	int totalPage=0; 			// 전체 페이지 수
	int totalBlock=0;  		// 전체 블럭수 

	int nowPage=1; 			// 현재페이지
	int nowBlock=1;  			// 현재블럭
	
	int start=0; 			// 디비의 select 시작번호
	int end=10; 			// 시작번호로 부터 가져올 select 갯수
	int listSize=0; 			// 현재 읽어온 게시물의 수
	
	if(request.getParameter("nowPage")!=null){
		nowPage=Integer.parseInt(request.getParameter("nowPage"));
	}
	
	BoardMgr boardmgr = new BoardMgr();
	
	int totalRecode = (int)boardmgr.getTotalCount();
	totalPage = (int)Math.ceil((double)totalRecode / numPerPage);
	totalBlock = (int)Math.ceil((double)totalPage/pagePerBlock);
	nowBlock = (int)Math.ceil((double)nowPage/pagePerBlock);
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">	\r\n");
      out.write("	function pageing(page) {\r\n");
      out.write("		document.readFrm.nowPage.value=page;\r\n");
      out.write("		var numPerPage=");
      out.print(numPerPage );
      out.write("\r\n");
      out.write("		document.readFrm.start.value=(page*numPerPage)-numPerPage;\r\n");
      out.write("		document.readFrm.end.value=numPerPage;\r\n");
      out.write("		var start = document.readFrm.start.value;\r\n");
      out.write("		var end = document.readFrm.end.value;\r\n");
      out.write("		console.log(start);\r\n");
      out.write("		console.log(end);\r\n");
      out.write("		document.readFrm.action=\"list.jsp\";\r\n");
      out.write("		document.readFrm.submit();\r\n");
      out.write("	}\r\n");
      out.write("	function block(value){\r\n");
      out.write("		var numPerPage=");
      out.print(numPerPage );
      out.write("\r\n");
      out.write("		var pagePerBlock=");
      out.print(pagePerBlock );
      out.write("\r\n");
      out.write("		document.readFrm.nowPage.value=pagePerBlock*(block-1)+1;\r\n");
      out.write("		var page = pagePerBlock*(block-1)+1;\r\n");
      out.write("		document.readFrm.start.value=(page*numPerPage)-numPerPage;\r\n");
      out.write("		document.readFrm.end.value=numPerPage;\r\n");
      out.write("	} \r\n");
      out.write("	function list() {\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	function read(num){\r\n");
      out.write("		document.readFrm.num.value=num;\r\n");
      out.write("		document.readFrm.nowPage.value='");
      out.print(nowPage);
      out.write("';\r\n");
      out.write("		var numPerPage=");
      out.print(numPerPage );
      out.write("\r\n");
      out.write("		var page=");
      out.print(nowPage);
      out.write("\r\n");
      out.write("		document.readFrm.start.value=(page*numPerPage)-numPerPage;\r\n");
      out.write("		document.readFrm.end.value=numPerPage;\r\n");
      out.write("	}\r\n");
      out.write("	function moveBlock(block){\r\n");
      out.write("		var numPerPage=");
      out.print(numPerPage );
      out.write("\r\n");
      out.write("		var pagePerBlock=");
      out.print(pagePerBlock );
      out.write("\r\n");
      out.write("		document.readFrm.nowPage.value=pagePerBlock*(block-1)+1;\r\n");
      out.write("		var page = pagePerBlock*(block-1)+1;\r\n");
      out.write("		document.readFrm.start.value=(page*numPerPage)-numPerPage;\r\n");
      out.write("		document.readFrm.end.value=numPerPage;\r\n");
      out.write("	}\r\n");
      out.write("	 \r\n");
      out.write("</script>\r\n");
      out.write("\r\n");


Vector<BoardBean> list = (Vector<BoardBean>)bMgr.getBoardList(0, 10);


      out.write("\r\n");
      out.write("\r\n");

	int pageStart=(nowBlock-1)*pagePerBlock+1;
	int pageEnd=((pageStart+pagePerBlock)<=totalPage)?(pageStart+pagePerBlock):totalPage+1;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div align=\"center\">\r\n");
      out.write("	<br/>\r\n");
      out.write("	<h2>JSPBoard</h2>\r\n");
      out.write("	<br/>\r\n");
      out.write("	\r\n");
      out.write("	<!-- 본문테이블  -->\r\n");
      out.write("	<table align=\"center\" width=\"1000\" cellpadding=\"3\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>\r\n");
      out.write("				Total : ");
      out.print( totalPage );
      out.write("(<span style=\"color:red\">");
      out.print(nowPage );
      out.write('/');
      out.print( totalPage );
      out.write("</span>)\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td align=\"center\" colspan=\"2\">\r\n");
      out.write("				\r\n");
      out.write("				  <table width=\"100%\" cellpadding=\"2\" cellspacing=\"0\">\r\n");
      out.write("				    <tr align=\"center\" bgcolor=\"#D0D0D0\" height=\"120%\">\r\n");
      out.write("						<td>번 호</td>\r\n");
      out.write("						<td>제 목</td>\r\n");
      out.write("						<td>이 름</td>\r\n");
      out.write("						<td>날 짜</td>\r\n");
      out.write("						<td>조회수</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					");
for(int i=0; i<list.size();i++){ 
      out.write("\r\n");
      out.write("					<tr align=\"center\" height=\"120%\">\r\n");
      out.write("						<td>");
      out.print(list.get(i).getNum() );
      out.write("</td>\r\n");
      out.write("						<td><a href=\"javascript:read('");
      out.print(list.get(i).getNum());
      out.write("')\">");
      out.print(list.get(i).getSubject() );
      out.write("</a></td>\r\n");
      out.write("						<td>");
      out.print(list.get(i).getName() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(list.get(i).getRegdate() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(list.get(i).getCount() );
      out.write("</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					");
} 
      out.write("\r\n");
      out.write("				</table> \r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\"><br /><br /></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			");
 if(totalPage!=0){ 
      out.write("\r\n");
      out.write("				<td>\r\n");
      out.write("					");
if(nowBlock>1){ 
      out.write("\r\n");
      out.write("						<a href=\"javascript:moveBlock('");
      out.print(nowBlock-1 );
      out.write("')\">[이전으로]</a>\r\n");
      out.write("    		");
} 
      out.write("\r\n");
      out.write("    			\r\n");
      out.write("    		");
for(int i=pageStart;i<pageEnd;i++){ 
      out.write("\r\n");
      out.write("    			<a href=\"javascript:pageing('");
      out.print(i);
      out.write("')\">[");
      out.print(i );
      out.write("]</a>\r\n");
      out.write("    		");
} 
      out.write("\r\n");
      out.write("    		\r\n");
      out.write("    		");
if(totalBlock>=nowBlock){ 
      out.write("\r\n");
      out.write("      			<a href=\"javascript:moveBlock('");
      out.print(nowBlock+1 );
      out.write("')\">[다음으로]</a>\r\n");
      out.write("      		");
} 
      out.write("\r\n");
      out.write("  			  \r\n");
      out.write("		</td>\r\n");
      out.write("		");
} 
      out.write("\r\n");
      out.write("			<td align=\"right\">\r\n");
      out.write("					<a href=\"post.jsp\">[글쓰기]</a> \r\n");
      out.write("					<a href=\"javascript:list()\">[처음으로]</a>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<form name=\"readFrm\" method=\"get\">\r\n");
      out.write("		<input type=\"hidden\" name=\"num\"> \r\n");
      out.write("		<input type=\"hidden\" name=\"nowPage\" value=\"");
      out.print(nowPage);
      out.write("\"> \r\n");
      out.write("		<input type=\"hidden\" name=\"start\">\r\n");
      out.write("		<input type=\"hidden\" name=\"end\">\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	<form name=\"listFrm\" method=\"post\">\r\n");
      out.write("		<input type=\"hidden\" name=\"reload\" value=\"true\"> \r\n");
      out.write("		<input type=\"hidden\" name=\"nowPage\" value=\"1\">\r\n");
      out.write("	</form>	\r\n");
      out.write("	\r\n");
      out.write("</div>	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
